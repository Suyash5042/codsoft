import random
import string

def generate_password(length=12, use_uppercase=True, use_digits=True, use_special=True):
    """Generate a random password with specified options."""
    # Define character sets
    lowercase = string.ascii_lowercase
    uppercase = string.ascii_uppercase if use_uppercase else ''
    digits = string.digits if use_digits else ''
    special = '!@#$%^&*()_+-=[]{}|;:,.<>?' if use_special else ''
    
    # Combine all allowed characters
    all_chars = lowercase + uppercase + digits + special
    
    # Ensure at least one character set is selected
    if not all_chars:
        return "Error: At least one character set must be selected"
    
    # Generate password
    password = []
    # Ensure at least one of each selected character type
    if use_uppercase:
        password.append(random.choice(uppercase))
    if use_digits:
        password.append(random.choice(digits))
    if use_special:
        password.append(random.choice(special))
    
    # Fill the rest of the password with random characters
    remaining_length = max(0, length - len(password))
    password.extend(random.choices(all_chars, k=remaining_length))
    
    # Shuffle to avoid predictable patterns
    random.shuffle(password)
    
    return ''.join(password)

def get_password_options():
    """Get password generation options from user."""
    try:
        length = int(input("Enter password length (default 12): ") or 12)
        if length < 4:
            print("Password length too short. Using minimum length of 4.")
            length = 4
            
        print("\nChoose character types (y/n):")
        use_upper = input("Include uppercase letters? (y/n, default y): ").lower() != 'n'
        use_digits = input("Include digits? (y/n, default y): ").lower() != 'n'
        use_special = input("Include special characters? (y/n, default y): ").lower() != 'n'
        
        return length, use_upper, use_digits, use_special
    except ValueError:
        print("Invalid input. Using default values.")
        return 12, True, True, True

def main():
    print("=== Password Generator ===")
    
    while True:
        print("\nOptions:")
        print("1. Generate password")
        print("2. Exit")
        
        choice = input("\nEnter your choice (1-2): ")
        
        if choice == '1':
            print("\nConfigure your password:")
            length, use_upper, use_digits, use_special = get_password_options()
            
            password = generate_password(length, use_upper, use_digits, use_special)
            print(f"\nGenerated Password: {password}")
            
            # Calculate password strength
            strength = "Strong"
            if length < 8:
                strength = "Weak (too short)"
            elif not (use_upper and use_digits and use_special):
                strength = "Medium (missing character types)"
                
            print(f"Strength: {strength}")
            
        elif choice == '2':
            print("Goodbye!")
            break
            
        else:
            print("Invalid choice. Please enter 1 or 2.")

if __name__ == "__main__":
    main()
